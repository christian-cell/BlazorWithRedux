@using Fluxor
@using FluxorRedux.Models
@using FluxorRedux.State.User
@inject IDispatcher Dispatcher

@if (IsOpen)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" placeholder="First Name" @bind="User.FirstName" />
                    <input type="text" class="form-control" placeholder="Last Name" @bind="User.LastName" />
                    <input type="text" class="form-control" placeholder="Email" @bind="User.Email" />
                    <!-- Agrega más campos según sea necesario -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="UpdateUser">Update</button>
                    <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public User User { get; set; }

    void Close() => OnClose.InvokeAsync();

    void UpdateUser()
    {
        Dispatcher.Dispatch(new UpdateUserAction(User));
        Close();
    }
}